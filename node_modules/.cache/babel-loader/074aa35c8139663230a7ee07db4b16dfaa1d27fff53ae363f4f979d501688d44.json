{"ast":null,"code":"var _jsxFileName = \"/Users/kpvarma/Documents/feedback-analysis/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FeedbackForm from './components/FeedbackForm';\nimport FeedbackChart from './components/FeedbackChart';\nimport FeedbackAnalysis from './components/FeedbackAnalysis';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [feedback, setFeedback] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Auto-detect and load theme from localStorage or system\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme');\n    if (storedTheme) {\n      setDarkMode(storedTheme === 'dark');\n    } else {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setDarkMode(prefersDark);\n    }\n  }, []);\n\n  // Apply theme + store it\n  useEffect(() => {\n    document.body.className = darkMode ? 'dark' : '';\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\n  }, [darkMode]);\n\n  // Simulate loading when chart renders\n  useEffect(() => {\n    if (feedback.length === 5) {\n      setLoading(true);\n      const timer = setTimeout(() => setLoading(false), 800); // simulate data processing\n      return () => clearTimeout(timer);\n    }\n  }, [feedback]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Feedback Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"toggle-button\",\n      onClick: () => setDarkMode(!darkMode),\n      children: [\"Toggle \", darkMode ? 'Light' : 'Dark', \" Mode\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackForm, {\n      onSubmit: setFeedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }, this), !loading && feedback.length === 5 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(FeedbackChart, {\n          data: feedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FeedbackAnalysis, {\n        data: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TcA1jM1p42CbdPd8touDrmkpbOg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FeedbackForm","FeedbackChart","FeedbackAnalysis","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","feedback","setFeedback","darkMode","setDarkMode","loading","setLoading","storedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","document","body","className","setItem","length","timer","setTimeout","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","data","_c","$RefreshReg$"],"sources":["/Users/kpvarma/Documents/feedback-analysis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport FeedbackForm from './components/FeedbackForm';\nimport FeedbackChart from './components/FeedbackChart';\nimport FeedbackAnalysis from './components/FeedbackAnalysis';\n\nfunction App() {\n  const [feedback, setFeedback] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Auto-detect and load theme from localStorage or system\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme');\n    if (storedTheme) {\n      setDarkMode(storedTheme === 'dark');\n    } else {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setDarkMode(prefersDark);\n    }\n  }, []);\n\n  // Apply theme + store it\n  useEffect(() => {\n    document.body.className = darkMode ? 'dark' : '';\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\n  }, [darkMode]);\n\n  // Simulate loading when chart renders\n  useEffect(() => {\n    if (feedback.length === 5) {\n      setLoading(true);\n      const timer = setTimeout(() => setLoading(false), 800); // simulate data processing\n      return () => clearTimeout(timer);\n    }\n  }, [feedback]);\n\n  return (\n    <div className=\"App\">\n      <h1>Feedback Analyzer</h1>\n\n      <button className=\"toggle-button\" onClick={() => setDarkMode(!darkMode)}>\n        Toggle {darkMode ? 'Light' : 'Dark'} Mode\n      </button>\n\n      <FeedbackForm onSubmit={setFeedback} />\n\n      {loading && <div className=\"loader\"></div>}\n\n      {!loading && feedback.length === 5 && (\n        <>\n          <div className=\"chart-container\">\n            <FeedbackChart data={feedback} />\n          </div>\n          <FeedbackAnalysis data={feedback} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,gBAAgB,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,WAAW,EAAE;MACfH,WAAW,CAACG,WAAW,KAAK,MAAM,CAAC;IACrC,CAAC,MAAM;MACL,MAAMG,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MAC7ET,WAAW,CAACM,WAAW,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAnB,SAAS,CAAC,MAAM;IACduB,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGb,QAAQ,GAAG,MAAM,GAAG,EAAE;IAChDK,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEd,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;EAC5D,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIU,QAAQ,CAACiB,MAAM,KAAK,CAAC,EAAE;MACzBZ,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMa,KAAK,GAAGC,UAAU,CAAC,MAAMd,UAAU,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MACxD,OAAO,MAAMe,YAAY,CAACF,KAAK,CAAC;IAClC;EACF,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,oBACEL,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAM,QAAA,gBAClB1B,OAAA;MAAA0B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1B9B,OAAA;MAAQoB,SAAS,EAAC,eAAe;MAACW,OAAO,EAAEA,CAAA,KAAMvB,WAAW,CAAC,CAACD,QAAQ,CAAE;MAAAmB,QAAA,GAAC,SAChE,EAACnB,QAAQ,GAAG,OAAO,GAAG,MAAM,EAAC,OACtC;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAET9B,OAAA,CAACJ,YAAY;MAACoC,QAAQ,EAAE1B;IAAY;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAEtCrB,OAAO,iBAAIT,OAAA;MAAKoB,SAAS,EAAC;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAEzC,CAACrB,OAAO,IAAIJ,QAAQ,CAACiB,MAAM,KAAK,CAAC,iBAChCtB,OAAA,CAAAE,SAAA;MAAAwB,QAAA,gBACE1B,OAAA;QAAKoB,SAAS,EAAC,iBAAiB;QAAAM,QAAA,eAC9B1B,OAAA,CAACH,aAAa;UAACoC,IAAI,EAAE5B;QAAS;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eACN9B,OAAA,CAACF,gBAAgB;QAACmC,IAAI,EAAE5B;MAAS;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACpC,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC1B,EAAA,CArDQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAuDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}